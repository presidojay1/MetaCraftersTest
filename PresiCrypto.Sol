// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {

    struct PresiCrypto {
        string TokenName;
        string TokenAbbrv;
        uint256 TotalSupply;
        address entityAddress;
    }

    PresiCrypto public presiCrypto;

    mapping(address => uint256) public balances;

    event Mint(address indexed recipient, uint256 value);
    event Burn(address indexed owner, uint256 value);

    constructor(string memory _name, string memory _TokenAbbrv, uint256 _totalSupply) {
        presiCrypto.TokenName = _name;
        presiCrypto.TokenAbbrv = _TokenAbbrv;
        presiCrypto.TotalSupply = _totalSupply;
        balances[msg.sender] = _totalSupply;
    }

    function mint(address _recipient, uint256 _value) public {
        require(_recipient != address(0), "Invalid recipient address");
        
        presiCrypto.TotalSupply += _value;
        // Increase recipient's balance
        balances[_recipient] += _value;
        
        // Emit mint event
        emit Mint(_recipient, _value);
    }

    function burn(address _owner, uint256 _value) public {
        require(_owner != address(0), "Invalid owner address");
        require(balances[_owner] >= _value, "Insufficient balance");
        presiCrypto.TotalSupply -= _value;

        // Decrease owner's balance
        balances[_owner] -= _value;

        // Emit burn event
        emit Burn(_owner, _value);
    }
}
